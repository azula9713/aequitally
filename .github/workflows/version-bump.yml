name: Auto Version Bump

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for manual version changes
        id: check-version
        run: |
          # Get the base branch (main) package.json version
          git fetch origin main:main
          MAIN_VERSION=$(git show main:package.json | jq -r '.version')

          # Get current PR branch package.json version
          PR_VERSION=$(jq -r '.version' package.json)

          echo "Main version: $MAIN_VERSION"
          echo "PR version: $PR_VERSION"

          if [ "$MAIN_VERSION" != "$PR_VERSION" ]; then
            echo "Manual version change detected: $MAIN_VERSION -> $PR_VERSION"
            echo "should_bump=false" >> $GITHUB_OUTPUT
            echo "manual_change=true" >> $GITHUB_OUTPUT
          else
            echo "No version change detected, proceeding with auto bump"
            echo "should_bump=true" >> $GITHUB_OUTPUT
            echo "manual_change=false" >> $GITHUB_OUTPUT
          fi

          echo "main_version=$MAIN_VERSION" >> $GITHUB_OUTPUT
          echo "pr_version=$PR_VERSION" >> $GITHUB_OUTPUT

      - name: Auto bump version
        if: steps.check-version.outputs.should_bump == 'true'
        run: |
          echo "Auto-bumping version from ${{ steps.check-version.outputs.main_version }}"
          node scripts/bump-version.js

          # Check if package.json was actually modified
          if git diff --quiet package.json; then
            echo "No version bump needed - package.json unchanged"
            echo "bump_applied=false" >> $GITHUB_ENV
          else
            echo "Version bump applied"
            echo "bump_applied=true" >> $GITHUB_ENV
            
            # Get the new version
            NEW_VERSION=$(jq -r '.version' package.json)
            echo "New version: $NEW_VERSION"
            echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: Commit version bump
        if: steps.check-version.outputs.should_bump == 'true' && env.bump_applied == 'true'
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ env.new_version }} [skip ci]"
          git push origin ${{ github.head_ref }}

      - name: Add auto-bump label
        if: steps.check-version.outputs.should_bump == 'true' && env.bump_applied == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['auto-version-bump']
            });

      - name: Add manual version label
        if: steps.check-version.outputs.manual_change == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['manual-version-change']
            });

      - name: Comment on PR
        if: steps.check-version.outputs.should_bump == 'true' && env.bump_applied == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Version automatically bumped')
            );

            const commentBody = `🚀 **Version automatically bumped** from \`${{ steps.check-version.outputs.main_version }}\` to \`${{ env.new_version }}\`

            This PR will deploy with the new version when merged to main. No additional deployment will be triggered.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Comment on manual version change
        if: steps.check-version.outputs.manual_change == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = `📝 **Manual version change detected** from \`${{ steps.check-version.outputs.main_version }}\` to \`${{ steps.check-version.outputs.pr_version }}\`

            Auto version bumping has been skipped for this PR.`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('📝 **Manual version change detected**')
            );

            if (!existingComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
